; (function (exports) {
    function urlsToAbsolute(nodeList) {
        if (!nodeList.length) {
            return []
        }

        let attrName = 'href'
        if (
            nodeList[0].__proto__ === HTMLImageElement.prototype ||
            nodeList[0].__proto__ === HTMLScriptElement.prototype
        ) {
            attrName = 'src'
        }

        nodeList = [].map.call(nodeList, function (el, i) {
            const attr = el.getAttribute(attrName)
            // If no src/href is present, disregard.
            if (!attr) {
                return
            }

            const absURL = /^(https?|data):/i.test(attr)
            if (absURL) {
                return el
            }
            // Set the src/href attribute to an absolute version.
            // if (attr.indexOf('/') != 0) { // src="images/test.jpg"
            //        el.setAttribute(attrName, document.location.origin + document.location.pathname + attr);
            //      } else if (attr.match(/^\/\//)) { // src="//static.server/test.jpg"
            //        el.setAttribute(attrName, document.location.protocol + attr);
            //      } else {
            //        el.setAttribute(attrName, document.location.origin + attr);
            //      }

            // Set the src/href attribute to an absolute version. Accessing
            // el['src']/el['href], the browser will stringify an absolute URL, but
            // we still need to explicitly set the attribute on the duplicate.
            el.setAttribute(attrName, el[attrName])
            return el
        })
        return nodeList
    }

    // TODO: current limitation is css background images are not included.
    function screenshotPage() {
        // 1. Rewrite current doc's imgs, css, and script URLs to be absolute before
        // we duplicate. This ensures no broken links when viewing the duplicate.
        urlsToAbsolute(document.images)
        urlsToAbsolute(document.querySelectorAll("link[rel='stylesheet']"))
        // urlsToAbsolute(document.scripts);

        // 2. Duplicate entire document.
        const screenshot = document.documentElement.cloneNode(true)

        // Use <base> to make anchors and other relative links absolute.
        const b = document.createElement('base')
        b.href = `${document.location.protocol}//${location.host}`
        const head = screenshot.querySelector('head')
        head.insertBefore(b, head.firstChild)

        // 3. Screenshot should be readyonly, no scrolling, and no selections.
        screenshot.style.pointerEvents = 'none'
        screenshot.style.overflow = 'hidden'
        screenshot.style.webkitUserSelect = 'none'
        screenshot.style.mozUserSelect = 'none'
        screenshot.style.msUserSelect = 'none'
        screenshot.style.oUserSelect = 'none'
        screenshot.style.userSelect = 'none'

        // 4. Preserve current x,y scroll position of this page. See addOnPageLoad_().
        screenshot.dataset.scrollX = window.scrollX
        screenshot.dataset.scrollY = window.scrollY

        // 4.5. When the screenshot loads (e.g. as ablob URL, as iframe.src, etc.),
        // scroll it to the same location of this page. Do this by appending a
        // window.onDOMContentLoaded listener which pulls out the saved scrollX/Y
        // state from the DOM.
        const script = document.createElement('script')
        script.textContent = `(${addOnPageLoad_.toString()})();` // self calling.
        screenshot.querySelector('body').appendChild(script)

        // 5. Create a new .html file from the cloned content.
        const blob = new Blob([screenshot.outerHTML], { type: 'text/html' })

        const url = URL.createObjectURL(blob)
        window.open(url, '_blank')
    }

    // NOTE: Not to be invoked directly. When the screenshot loads, it should scroll
    // to the same x,y location of this page.
    function addOnPageLoad_() {
        window.addEventListener('DOMContentLoaded', function (e) {
            const scrollX = document.documentElement.dataset.scrollX || 0
            const scrollY = document.documentElement.dataset.scrollY || 0
            window.scrollTo(scrollX, scrollY)
        })
    }

    exports.screenshotPage = screenshotPage
})(window)
